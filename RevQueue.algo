import class java.io.BufferedReader
import class java.io.InputStreamReader
public class RevQueue:
	define global StringArray queue
	define global int 	  cap
	define global int         front, rear
	constructor RevQueue(parameter as int cap):
		1. current instance of cap <- param cap
		2. queue <- new String array with capacity 'cap'
		3. front  <- 0
		4. rear <- -1
	function push(param String entry, return type: void):
		1. queue[ rear + 1 ] <- entry
		2. if ArrayIndexOutOfBoundsException e is caught in STEP 1 GOTO SETP 5
		3. rear <- rear + 1
		4. exit from funtion
		5. print "Pushed" + <entry> + "NEW_LINE"
	function pop(return type: String, throws Exception):
		1. String out <- queue[front]
		2. front <- front  + 1
		3. if front >= rear GOTO STEP 4 else GOTO STEP 6
		4. front <- 0
		5. rear = -1
		6. if rear = -1 GOTO STEP 7 else GOTO STEP 8
		7. throw custom new Exception "Queue Underflow"
		8. return out
	function reverse(return type: void):
		1. String tmp <- ""
		2. int i <- 0, int j <- cap - 1
		3. while i < cap / 2 CONTINUE STEPS 3 to 6 else GOTO 9
		4. tmp = queue[ j ]
		5. queue[ j ] = queue[ i ]
		6. queue[ i ] = tmp
		7. i <- i + 1
		8. j <- j - 1
		9. end
	function print(param StringArray queue, return type: void):
		1. if rear = -1 GOTO STEP 2 else GOTO STEP 3
		2. throw custom new Exception "Queue Underflow"
		3. int i <- front
		4. while i <= rear CONTINUE STEPS 4 to 5 else GOTO 6
		5. print "queue[ i ]" + "TAB_SPACE"
		6. print "NEW_LINE"
	public static function main(param StringArray args, return type: void):
		1. br <- new BufferedReader object
		2. print "Enter queue capacity: "
		3. queue <- new RevQueue object (param: int input from br)
		4. print "\nEnter\n1 for new entry\n2 for entry pop\n3 for original queue\n4 for reversed queue\n0 to exit\nEnter: "
		5. switch (new int input from br ) for menu driven interface
		6. if 1 is encountered from STEP 5
		7. print "Queue entry: "
		8. push into queue (new String input from br)
		9. if Exception e is caught in STEP 8 GOTO STEP 10 else GOTO STEP 11
		10. print "e"
		11. GOTO STEP 35
		12. if 2 is encountered from STEP 5
		13. print <popped element from queue> + " popped"
		14. if Exception e is caught in STEP 13 GOTO STEP 15 else GOTO STEP 16
		15. print "e"
		16. GOTO STEP 35
		17. if 3 is encountered from STEP 5
		18. print "Original: "
		19. call function print(param queue.queue, reference object: queue)
		20. if Exception e is caught in STEP 19 GOTO STEP 21 else GOTO STEP 22
		21. print "e"
		22. GOTO STEP 35
		23. if 4 is encountered from STEP 5
		24. print "Reversed: "
		25. call function reverse(reference object: queue)
		26. call function print(param queue.queue, reference object: queue)
		27. if Exception e is caught in STEP 15 or STEP 26 GOTO STEP 28 else GOTO STEP 29
		28. print "e"
		29. GOTO STEP 35
		30. if 0 is encountered from STEP 5
		31. print "Exiting" + "NEW_LINE"
		32. terminate currently running instance of JVM in computer memory
		33. if ANYTHING_ELSE is encountered from STEP 5
		34. print "Invalid choice, retry"
		35. continue STEPS 4 to 34 until JVM is closed manually from the interface
